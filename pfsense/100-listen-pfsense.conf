<source>
  @type syslog
  port 5142
  bind 0.0.0.0
  tag pfsense.messages
</source>

# We start by filtering only logs from the PFSense filterlog
<match pfsense.**>
  type rewrite_tag_filter
  rewriterule1 host ^filterlog  pf_logs # Get logs from filterlog
  rewriterule2 .*                   clear # everyone else
</match>

# This transforms the pfsense pflog into something a little more usable
<match pf_logs>
  type parser
  key_name message
  format csv
  keys rule,sub_rule,anchor,tracker,interface,reason,action,direction,ip_ver,tos,ecn,ttl,id,offset,flags,protocol_id,protocol,length,source,destination,source_port,destination_port,data_length,tcp_flags,seq_number,ack,window,urg,options
  null_value_pattern '-'
  tag pf_parsed
</match>

# Now we rewrite the tags to seperate out each type of traffic
<match pf_parsed>
  type rewrite_tag_filter
  rewriterule1 protocol ^tcp  pf_tcp # rewrite tcp traffic
  rewriterule2 protocol ^udp  pf_udp # rewrite udp traffic
  rewriterule3 protocol ^icmp pf_icmp # rewrite icmp traffic
  rewriterule4 .*                   clear
</match>

# You don't need this, but the values just come up nil in most cases
<filter pf_tcp>
  @type record_transformer
  enable_ruby true
  remove_keys rule,sub_rule,anchor,ecn
</filter>

#This section pulls the extra fields from the transform. UDP does not have tcp_flags, seq_number,ack etc
<filter pf_udp>
  @type record_transformer
  enable_ruby true
  remove_keys rule,sub_rule,anchor,ecn,tcp_flags,seq_number,ack,window,urg,options
</filter>

#This section does the same as above, but for the source_port we need to transform to icmp_type because that is how it's logged. 
# I left the options field available for extra data sent by pfsense
<filter pf_icmp>
  @type record_transformer
  enable_ruby true
  <record>
    icmp_type ${record["source_port"]}
  </record>
  remove_keys rule,sub_rule,anchor,ecn,source_port,destination_port,data_length,tcp_flags,seq_number,ack,window,urg
</filter>

########################################################################################################
# This is helpful for troubleshooting locally. You can output each type of traffic into it's own log. 
#<match pf_udp>
#  @type file
#  path /var/log/pfsense/pflog.udp.log
#</match>

#<match pf_tcp>
#  @type file
#  path /var/log/pfsense/pflog.tcp.log
#</match>

#<match pf_icmp>
#  @type file
#  path /var/log/pfsense/pflog.icmp.log
#</match>
##########################################################################################################

#Now we pipe all the logs into elastic, and boom you are done!
<match pf_tcp>
  @type elasticsearch
  logstash_format true
</match>
<match pf_udp>
  @type elasticsearch
  logstash_format true
</match>
<match pf_icmp>
  @type elasticsearch
  logstash_format true
</match>



<match clear>
  @type null
</match>
